The execution time of a program 

Often, to solve a problem, an algorithm has to be chosen from many available, the two main choosing criteria being contradictory :

the algorithm should be easy to understand, to code and debug
the algorithm should use efficiently the computer's resources and the execution time should be kept at minimum
The running time of a program depends on the following factors

input data
quality of the code generated by the compiler
nature and the execution speed of program instructions 
complexity of the algorithm 
Running time is therefore a function related to its input data, most of the times, not depending on the values but rather on the number of input data.

We write T(n) the running time of a program with input data of size n. For example T(n) can be cn 2 where c is a constant.

If the running time depends on the values of the input data, in the calculus of T(n) the worst-case scenario( the one that leads to a higher running time) will be taken into consideration. 

Because the running time depends not only on input (n)  and algorithm, but also on computer performance, T(n) is considered proportional to a certain n-function and it's not expressed in real time units. T(n) = cf(n).

Running time T(n) can be expressed through a O(f(n)) function, if there are c and n0 positive constants, such that T(n)<=cf(n), for any n>= n0. O(f(n)) function is the aproximation of the upper bound of T(n) and we say that T(n) is O(f(n)) and f(n) is  referred to as the upper bound of the growth rate of T(n).
